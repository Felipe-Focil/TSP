# Inicializar proyecto

Con el objetivo de incentivar el trabajo colaborativo y tener los documentos centralizados en un solo lugar, se utiliza la plataforma de GitHub.

A continuaci√≥n se describir√° acerca del uso de esta plataforma.

## Instalacion
Primero que nada tendr√°s que instalar [Git](https://git-scm.com/downloads) en tu computadora, para posteriormente abrir la terminal de Git (Git Bash).

Para verificar que Git est√© funcionando correctamente ingresa el siguiente comando para ver la versi√≥n actual de Git.

    git --version

## Configuraci√≥n de Usuario

Deber√°s configurar la informaci√≥n b√°sica de tu usuario y tu editor de c√≥digo predeterminado (Visual Studio Code)

(No es necesario que sea exactamente la misma informaci√≥n de tu usuario de Github).

    git config --global user.name "Inserta Tu Nombre"
    git config --global user.email "Inserta tu Correo"
    git config --global core.editor "code --wait"

Dependiendo de tu Sistema Operativo deber√°s ingresar el siguiente comando para establecer el est√°ndar para el salto de l√≠nea a la hora de trabajar en el repositorio. Se trabajar con LF.

### Windows
    git config --global core.autocrlf true
### Linux / Mac
    git config --global core.autocrlf input

# Inicializar Repositorio

## Crear carpeta :file_folder:

Deber√° crear una carpeta en cualquier locaci√≥n que desees en tu computadora, sin embargo que sea f√°cilmente accesible; y empezaras a mover desde la terminal hacia la carpeta que hayas con el comando cd. Un ejemplo de esto seria:

    cd Universidad/Primavera2023/TSP

Si no recuerdas el nombre exacto de la carpeta o de los archivos que quieres acceder, puedes colocar el comando ls, para que estos se muestren en la terminal.

## Crear repositorio local 

Para crear el repositorio local, deber√°n usar el siguiente comando.

    git init

Para conectar tu repositorio local con el repositorio remoto de GitHub, deber√°s usar el siguiente de comando seguido de la liga del repositorio.

    git remote add origin https://github.com/Felipe-Focil/TSP.git

Finalmente usaras el comando pull para actualizar tu repositorio local con los cambios m√°s recientes de cierta rama, en este caso, la rama principal.

    git pull origin main

# Uso de Git

Ahora ya podr√°s contribuir con el repositorio a√±adiendo, eliminando o modificando archivos, pero para esto hay que tomar algunas consideraciones.

# **Nunca trabajes en la rama principal**

No quieres por error modificar el trabajo de alguien m√°s, as√≠ que deber√°s crear una rama por cada funcionalidad que agregues.

Para nombrar la ramas, ser√°n por el nombre de la funcionalidad seguido de una diagonal y la fase de la funcionalidad.

Por ejemplo, imagina que quieres generar un problema que sea de sumar dos n√∫meros A y B, pero c√≥mo es demasiado trabajo para una sola persona o piensas que no puedes acabarlo de una sola vez, solo trabajaras en la especificaci√≥n del problema.

Para movernos a una rama usaremos el comando checkout

    git checkout [Nombre de la rama]

En caso que la rama no exista en el repositorio remoto, crearemos la rama agregando como par√°metro el comando *-b* seguido de la rama.

    git checkout -b A+B/Especificacion

## A√±adiendo cambios :pencil:

Una vez estando en la subrama, podremos empezar todos los cambios que queramos, agregar, modificar o eliminar archivos en nuestro repositorio local, pero estos no se ver√°n reflejados en el mismo hasta que expl√≠citamente los a√±adamos.

Para ver cu√°l es el estado actual de nuestro repositorio, usaremos el comando status, en este caso, para saber cu√°les archivos no han sido a√±adidos al repositorio.

    git status

Para a√±adir un archivo al repositorio se usar√° el comando add seguido del nombre del archivo.

    git add archivoEjemplo.txt

Tambi√©n puedes agregar todos los archivos que hayan sido a√±adidos o hayan recibido cambios colocando un punto en lugar del nombre del archivo. 

**Esto se considera una mala pr√°ctica, as√≠ que solo √∫salo cuando est√© completamente seguro que quieres agregar todos los archivos que hayas usado**

    git add .

## Comprometer cambios üí≠

Una vez hayas realizado todos los cambios que consideres prudentes, te tienes que comprometer que est√°s de acuerdo con los cambios y que se va a guardar el estado actual de tu repositorio.

Esto se consigue mediante el comando commit seguido de un mensaje el cual explique los cambios realizados.

**üí≠Recuerda que este mensaje lo ver√°n otras personas, as√≠ que intenta que este sea claro,corto y conciso acerca de los cambios que realizasteüí≠**

    git commit -m "Actualizar readme"

## Subir cambios :arrow_up_small:

Puedes hacer varios commits antes de decidir subir los cambios a la nube, **Recuerda trabajar en tu rama**, pero cuando creas prudente, usa el comando push para empujar el estado de tu repositorio local con el remoto, el cual tiene acceso las demas personas.

    git push

En caso de que la rama en la que est√©s trabajando no exista en el repositorio remoto, deber√°s especificar que esta rama es el origen de lo que quieres hacer push.

    git push -u origin A+B/Especificacion

## Pull Request :thumbsup:

Una vez subiendo tu intenci√≥n de agregar tu estado de tu repositorio local a la nube, debes de realizar una intenci√≥n para que los demas puedan jalar tus cambios a sus respectivos repositorios.

Es importante que est√©s constantemente actualizando tu repositorio local, en caso de que haya habidos cambios, en la rama que est√©s trabajando, as√≠ como en la rama principal.

Para actualizar la rama en la cual te encuentres ubicado en ese momento, basta con usar el comando
    
    git pull

En caso de querer actualizar una rama en concreto, se establecera que el origen deber√° ser dicha rama.

    git pull origin main

Para esto en GitHub deber√°s ir a la pesta√±a de Pull Request (PR) y debera aparecer tu intenci√≥n de hacer un push, deberar nombrar este PR bajo la siguiente notaci√≥n [Funcionalidad] Fase; Puedes agregar una descripci√≥n detallada si consideras pertinente.

Ahora solo debes de esperar a que alguien m√°s revise tu PR y corregir los cambios, en caso de ser necesarios. Una vez todo este en orden, se podra fusionar la rama con la rama principal.‚úÖ 

# Comentarios Finales :raising_hand:

Git es una herramienta que se domina con la pr√°ctica, recuerda que siempre puedes buscar en internet o preguntarle a alguien en caso de que tengas dudas.